{
  "name": "Phishind - Detail classification",
  "nodes": [
    {
      "parameters": {
        "fileName": "/data/result_analyze_detailed.csv",
        "options": {
          "append": true
        }
      },
      "id": "321eab85-4a38-4788-b311-0a55b4c2aab5",
      "name": "Write to CSV",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        1040,
        2480
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analise o e-mail e classifique em:\n\n'Phishing' se:\nDomínio com typosquatting (ex: \"paypa1.com\") ou registrado há <6 meses\nURLs com ofuscação (ex: bit.ly/3xYz, IP em hex) ou portas não padrão (:8080)\nTáticas de urgência (\"Sua conta será bloqueada!\"), falsa autoridade (\"Departamento Financeiro\") ou erros gramaticais graves\nRemetente incongruente (ex: \"suporte@banco123.com\" para e-mail \"do governo\")\nLinks para páginas de login falsas ou anexos executáveis (.exe, .js)\nFoco em roubo de dados (credenciais, informações sensíveis) via imitação de entidades legítimas.\n\n'Fraud' se:\nOfertas irreais (heranças, prêmios não solicitados)\nHistórias elaboradas (ajuda para transferir fortunas, investimentos \"exclusivos\")\nPedidos diretos de dados financeiros (PIX, depósitos) sem relação com serviços legítimos\nFoco em extorsão financeira direta (transferências, depósitos) via histórias falsas\n\n'Commercial Spam' se:\nConteúdo puramente promocional (ofertas de lojas, newsletters)\nSem elementos de phishing/fraude, apenas publicidade não solicitada\n\n'False Positives' se:\nComunicação legítima (ex: confirmação de compra, faturas reais)\nSem indícios de malícia após verificação cruzada de domínio/contexto\n\nResponda estritamente com apenas uma das palavras abaixo:\n-Phishing\n-Fraud\n-Commercial Spam\n-False Positives\nSem qualquer outro caractere, formatação ou pontuação.\n\n\nDados para análise:\n**assunto:** {{ JSON.stringify($json.subject) }}\n**corpo:** {{ JSON.stringify($json.body) }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -560,
        2580
      ],
      "id": "4a07fc93-3f18-48ea-ab85-434cdfbdf42b",
      "name": "Classify with LLM",
      "alwaysOutputData": true,
      "retryOnFail": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2000,
        2480
      ],
      "id": "01b8018b-0585-450a-bc3e-b5ba3dfcae5b",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "filePath": "/data/emails_list_detailed.csv"
      },
      "id": "7be5d3e6-adc5-4347-bc39-0147bfc8db65",
      "name": "Read CSV",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -1800,
        2480
      ]
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "84277897-662e-453d-9e1d-b9d3b58410d7",
      "name": "Merge data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        120,
        2300
      ]
    },
    {
      "parameters": {
        "functionCode": "return {\n  end_time: Date.now(),\n  text: $input.first().json.text\n}"
      },
      "id": "b0545b94-445c-4320-a00e-3d07d5e265f4",
      "name": "End timer",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -120,
        2460
      ]
    },
    {
      "parameters": {
        "functionCode": "const item = $input.first().json;\nitem.start_time = Date.now();\nreturn item;"
      },
      "id": "c7d7cfb6-3158-4e59-8ca2-43483c44e8db",
      "name": "Start timer",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -860,
        2480
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1120,
        2480
      ],
      "id": "3befea4c-217e-4de7-b925-fabdcae0e36f",
      "name": "Loop over items",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "functionCode": "function fixEncoding(str) {\n  try {\n    return Buffer.from(str || '', 'binary').toString('utf8');\n  } catch (err) {\n    return str;\n  }\n}\n\nconst rows = items.slice(1);\n\nreturn rows.map((item, indice) => {\n    const row = item.json.row;\n    if (!row) return null;\n\n    return {\n      json: {\n        index: indice || 0,\n        subject: fixEncoding(row[0] || ''),\n        body: fixEncoding(row[1] || ''),\n        classification: row[2] || ''\n     },\n  };\n}).filter(item => item !== null);"
      },
      "id": "e7ad20e5-88bf-41f2-9a63-a5658052dc9a",
      "name": "Format email data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1400,
        2480
      ]
    },
    {
      "parameters": {
        "options": {
          "headerRow": false
        }
      },
      "id": "9cd597bf-1bd9-4945-a9e8-d70ec2104dc8",
      "name": "Parse CSV data",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        -1600,
        2480
      ]
    },
    {
      "parameters": {
        "functionCode": "return items.map(item => ({\n  json: {\n    indice: item.json.index || 0,\n    subject: item.json.subject || '',\n    body: item.json.body || '',\n    classification: item.json.classification || '',\n    llm_classification: item.json.text,\n    classification_date: new Date().toISOString(),\n    start_time: item.json.start_time,\n    end_time: item.json.end_time\n  }\n}));"
      },
      "id": "8a61a683-6444-425e-802d-34b10e6dd643",
      "name": "Format output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        600,
        2480
      ]
    },
    {
      "parameters": {
        "functionCode": "// Cabeçalho atualizado\nconst headers = [\n  'indice',\n  'subject',\n  'body',\n  'classification',\n  'llm_classification',\n  'classification_date',\n  'start_time',\n  'end_time',\n  'processing_time_seconds' \n];\n\nlet values = items.map(item => {\n\n  const processingTime = item.json.end_time && item.json.start_time\n    ? ((item.json.end_time - item.json.start_time) / 1000).toFixed(3)\n    : '';\n  \n  return [\n    item.json.indice,\n    `\"${(item.json.subject || '').replace(/\"/g, '\"\"')}\"`,\n    `\"${(item.json.body || '').replace(/\"/g, '\"\"')}\"`,\n    item.json.classification,\n    item.json.llm_classification,\n    item.json.classification_date,\n    item.json.start_time,\n    item.json.end_time,\n    processingTime \n  ];\n});\n\n// Adiciona cabeçalho apenas se algum item tiver indice === 0\nif (items.some(item => item.json.indice === 0)) {\n  values = [headers, ...values];\n}\n\n// Gera CSV\nconst csvContent = values.map(row => row.join(',')).join('\\n') + '\\n';\n\nreturn [{\n  json: {},\n  binary: {\n    data: {\n      data: Buffer.from(csvContent).toString('base64'),\n      mimeType: 'text/csv'\n    }\n  }\n}];\n"
      },
      "name": "Create CSV binary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        820,
        2480
      ],
      "id": "3ba4fbe8-2ff0-4b29-8aaa-2694d0ec56c1"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        640,
        2800
      ],
      "id": "33493357-9d37-4849-ab35-45ffa6f4ca39",
      "name": "Wait",
      "webhookId": "e9d5b6a9-7f46-402c-b4b3-f619ade3e29b"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -560,
        2800
      ],
      "id": "c4ce0030-b0bc-407e-9927-af010997fd28",
      "name": "Groq LLM",
      "credentials": {
        "groqApi": {
          "id": "dnbvDo48eVSl7eA6",
          "name": "Groq account 2"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-haiku-20240307",
          "mode": "list",
          "cachedResultName": "Claude Haiku 3"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -420,
        2800
      ],
      "id": "faf96ddc-7f38-4479-9cee-fcfd06bbc5cc",
      "name": "Anthropic LLM",
      "credentials": {
        "anthropicApi": {
          "id": "DZVlJUPvsCxSC9Kf",
          "name": "Anthropic account 2"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -280,
        2800
      ],
      "id": "298f57f4-f81b-4a46-aaf3-5ce4719b84a8",
      "name": "OpenAI LLM",
      "credentials": {
        "openAiApi": {
          "id": "eRfDGiQ2qHL7MoAI",
          "name": "OpenAi account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Classify with LLM": {
      "main": [
        [
          {
            "node": "End timer",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Read CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read CSV": {
      "main": [
        [
          {
            "node": "Parse CSV data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge data": {
      "main": [
        [
          {
            "node": "Format output",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "End timer": {
      "main": [
        [
          {
            "node": "Merge data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Start timer": {
      "main": [
        [
          {
            "node": "Classify with LLM",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over items": {
      "main": [
        [],
        [
          {
            "node": "Start timer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format email data": {
      "main": [
        [
          {
            "node": "Loop over items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV data": {
      "main": [
        [
          {
            "node": "Format email data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format output": {
      "main": [
        [
          {
            "node": "Create CSV binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create CSV binary": {
      "main": [
        [
          {
            "node": "Write to CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop over items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq LLM": {
      "ai_languageModel": [
        [
          {
            "node": "Classify with LLM",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic LLM": {
      "ai_languageModel": [
        []
      ]
    },
    "OpenAI LLM": {
      "ai_languageModel": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2bd92ba0-059b-4ca8-92ec-a18ba5ff2319",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "42c406e8d82dbfe6b2b106b5a7a270503d19a19f6ae90f29f444e555385f7418"
  },
  "id": "z3cJOf4WkP6YG2Gl",
  "tags": []
}
